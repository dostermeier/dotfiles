#!/usr/bin/env bash
#
# bootstrap installs things.

usage()
{
    cat << EOF
    usage: $0 options

    This script links the contents of the .dotfiles directory
    to the $HOME.  When executed on a Mac, this will also 
    download and install external dependencies.

    OPTIONS:
       -O | --overwrite-all      Overwrite all existing content.
       -B | --backup-all         Backup the existing content that would otherwise be 
                                 replaced. 
       -S | --skip-all
       -h | --help               Show this message
EOF
}

OVERWRITE_ALL=false
BACKUP_ALL=false
SKIP_ALL=false

while [ "$1" != "" ]; do
    PARAM=`echo $1 | awk -F= '{print $1}'`
    VALUE=`echo $1 | sed 's/^[^=]*=//g'`
    case $PARAM in
        -h | -? | --help)
            usage;
            exit 1;
            ;;
        -O | --OVERWRITE-all)
            OVERWRITE_ALL=true;
            ;;
        -B | --BACKUP-all)
            BACKUP_ALL=true;
            ;;
        -S | --SKIP-all)
            SKIP_ALL=true;
            ;;
        *)
            echo "ERROR: unknown parameter \"$PARAM\""
            usage
            exit 1
            ;;
    esac;
    shift;
done;

DOTFILES_ROOT="`pwd`"

set -e

echo ''

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

info "installing dotfiles\n"

for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
do
  dest="$HOME/.`basename \"${source%.*}\"`"

  if [ -f $dest ] || [ -d $dest ]
  then

    OVERWRITE=false
    BACKUP=false
    SKIP=false

    if [ "$OVERWRITE_ALL" == "false" ] && [ "$BACKUP_ALL" == "false" ] && [ "$SKIP_ALL" == "false" ]
    then
      user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
      read -n 1 action

      case "$action" in
        o )
          OVERWRITE=true;;
        O )
          OVERWRITE_ALL=true;;
        b )
          BACKUP=true;;
        B )
          BACKUP_ALL=true;;
        s )
          SKIP=true;;
        S )
          SKIP_ALL=true;;
        * )
          ;;
      esac
    fi

    if [ "$OVERWRITE" == "true" ] || [ "$OVERWRITE_ALL" == "true" ]
    then
      rm -rf $dest
      success "removed $dest"
    fi

    if [ "$BACKUP" == "true" ] || [ "$BACKUP_ALL" == "true" ]
    then
      mv $dest $dest\.backup
      success "moved $dest to $dest.backup"
    fi

    if [ "$SKIP" == "false" ] && [ "$SKIP_ALL" == "false" ]
    then
      link_files $source $dest
    else
      success "skipped $source"
    fi

  else
    link_files $source $dest
  fi

done


# If we're on a Mac, let's install and setup homebrew.
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies\n"
  if source bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
